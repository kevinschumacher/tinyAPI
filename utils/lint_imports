#!/usr/bin/env python3

# ----- Imports ---------------------------------------------------------------

from tinyAPI.base.config import ConfigManager
from tinyAPI.base.exception import tinyAPIException
from tinyAPI.base.services.cli import cli_main
from tinyAPI.base.services.unit_testing import Manager

import os
import re
import subprocess
import tinyAPI

# ----- Main ------------------------------------------------------------------

def main(cli):
    cli.header('Linting Imports')

    paths = ConfigManager().value('application dirs')
    fix = {}
    for path in paths:
        files = subprocess.check_output(
                    "/usr/bin/find "
                    + path
                    + "/* -name \"*.py\"; "
                    + "exit 0",
                    stderr=subprocess.STDOUT,
                    shell=True).decode().split('\n')
        for file in files:
            if len(file) == 0 or re.search('__init__\.py$', file):
                continue

            with open(file) as f:
                contents = f.read()

            contents = re.sub('import \*', 'import ___all___', contents)

            matches = _from_module_import_symbol(contents)
            for match in matches:
                if len(re.findall(match, contents, re.M | re.I | re.S)) < 2:
                    if not file in fix:
                        fix[file] = []
                    fix[file].append(match)

            matches = _import_module_as_symbol(contents)
            for match in matches:
                if len(re.findall(match, contents, re.M | re.I | re.S)) < 2:
                    if not file in fix:
                        fix[file] = []
                    fix[file].append(match)

    if len(fix) > 0:
        cli.notice("The following imports are unnecessary:")
        for key, value in fix.items():
            cli.error(key, 1)
            for symbol in value:
                cli.error(symbol, 2)
    else:
        cli.notice('All imports are correct.')

# ----- Private Functions -----------------------------------------------------

def _from_module_import_symbol(contents):
    matches = re.findall('(from .*? import .*?)$',
                         re.sub('\\\\\n', ' ', contents),
                         re.M | re.I | re.S)
    results = []
    for match in matches:
        symbols = re.findall('from (.*?) import (.*?)$',
                             re.sub('[ ]+', ' ', match),
                             re.M | re.I | re.S)
        for terms in symbols:
            term = terms[1]
            if terms[1] == '___all___':
                term = terms[0]

            term = term.split(', ')
            results.extend(term)

    return results

def _import_module_as_symbol(contents):
    matches = re.findall('(import .*?)$',
                         re.sub('\\\\\n', ' ', contents),
                         re.M | re.I | re.S)
    results = []
    for match in matches:
        symbols = re.findall(' as (.*?)$', match)
        if not symbols:
            symbols = re.findall('import (.*?)$',
                                 re.sub('[ ]+', ' ', match))
            for term in symbols:
                if term != '___all___':
                    term = term.split(', ')
                    results.extend(term)
        else:
            results.extend(symbols)

    return results

# ----- Instructions ----------------------------------------------------------

cli_main(main)
